import{o as n,c as s,d as a}from"./app.ae8eaa2d.js";const e='{"title":"Configuration with Composition API","description":"","frontmatter":{"editLink":true},"headers":[{"level":2,"title":"useScreen","slug":"usescreen"},{"level":2,"title":"useGrid","slug":"usegrid"}],"relativePath":"guide/configuration/composition-api.md","lastUpdated":1626873378070}',t={},o=a('<h1 id="configuration-with-composition-api"><a class="header-anchor" href="#configuration-with-composition-api" aria-hidden="true">#</a> Configuration with Composition API</h1><h2 id="usescreen"><a class="header-anchor" href="#usescreen" aria-hidden="true">#</a> useScreen</h2><div class="language-js"><pre><code><span class="token function">useScreen</span><span class="token punctuation">(</span>ssrConfig<span class="token operator">?</span><span class="token punctuation">,</span> debounceDelay<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SsrConfig</span> <span class="token punctuation">{</span>\n    width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    orientation<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;portrait&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;landscape&#39;</span><span class="token punctuation">;</span>\n    touch<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><strong>ssrConfig</strong>: an optional SsrConfig object for server-side rendering</li><li><strong>debounceDelay</strong>: an optional delay in milliseconds to debounce the resize event on the window object. Defaults to 100ms.</li></ul><p><strong>ssrConfig</strong> is used on the initial screen configuration, and is mostly used for server-side rendering where there is no window object to obtain screen information from. The default value is taken from the Google Bot mobile crawler to force a mobile-first approach:</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  width<span class="token operator">:</span> <span class="token number">430</span><span class="token punctuation">,</span>\n  height<span class="token operator">:</span> <span class="token number">730</span>\n  orientation<span class="token operator">:</span> <span class="token string">&#39;portrait&#39;</span><span class="token punctuation">,</span>\n  touch<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div><br> If you are not performing server-side rendering in your app, this config has no impact. <h2 id="usegrid"><a class="header-anchor" href="#usegrid" aria-hidden="true">#</a> useGrid</h2><div class="language-ts"><pre><code><span class="token function">useGrid</span><span class="token punctuation">(</span>config<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li><strong>config</strong>: a grid config.</li></ul><p>The value can either be a string literal, with one of the supported UI frameworks:</p><div class="language-ts"><pre><code><span class="token string">&#39;tailwind&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;bootstrap&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;bulma&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;foundation&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;materialize&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;semanticUi&#39;</span>\n</code></pre></div><p>or an object that specifies a custom grid:</p><div class="language-ts"><pre><code>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> ComputedBreakpoint<span class="token operator">&gt;</span>\n</code></pre></div><p>For example:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useGrid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-screen&#39;</span>\n\n<span class="token function">useGrid</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;340px&#39;</span><span class="token punctuation">,</span>\n  tablet<span class="token operator">:</span> <span class="token number">768</span><span class="token punctuation">,</span>\n  desktop<span class="token operator">:</span> <span class="token string">&#39;32em&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><br><h4 id="computed-breakpoints"><a class="header-anchor" href="#computed-breakpoints" aria-hidden="true">#</a> Computed breakpoints</h4><p>Aside from using direct breakpoint values, you can also specify breakpoints that depend on other breakpoints, for example:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useGrid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-screen&#39;</span>\n\n<span class="token function">useGrid</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;340px&#39;</span><span class="token punctuation">,</span>\n  tablet<span class="token operator">:</span> <span class="token number">768</span><span class="token punctuation">,</span>\n  desktop<span class="token operator">:</span> <span class="token string">&#39;32em&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">tabletAndDown</span><span class="token operator">:</span> <span class="token parameter">grid</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>grid<span class="token punctuation">.</span>desktop<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>In this example, the breakpoint <code>tabletAndDown</code> will be recalculated everytime <code>desktop</code> breakpoint changes.</p><br><h4 id="extending-default-ui-frameworks-breakpoints"><a class="header-anchor" href="#extending-default-ui-frameworks-breakpoints" aria-hidden="true">#</a> Extending default UI frameworks breakpoints</h4><p>Sometimes it&#39;s useful to add new breakpoints to the default configuration of one of the supported UI frameworks.<br> You can do that by using the <code>extendGrid</code> helper:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useGrid<span class="token punctuation">,</span> extendGrid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-screen&#39;</span>\n\n<span class="token function">useGrid</span><span class="token punctuation">(</span><span class="token function">extendGrid</span><span class="token punctuation">(</span><span class="token string">&#39;tailwind&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">mdAndDown</span><span class="token operator">:</span> <span class="token parameter">grid</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>grid<span class="token punctuation">.</span>lg\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div>',27);t.render=function(a,e,t,p,r,i){return n(),s("div",null,[o])};export default t;export{e as __pageData};
